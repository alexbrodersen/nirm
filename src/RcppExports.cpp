// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// hinirmcpp
Rcpp::List hinirmcpp(arma::cube data, const int nschool, const int nmax, const int nitem, const int ndim, arma::vec ncount, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double pr_mean_gamma, const double pr_sd_gamma, const double pr_mean_mu, const double pr_sd_mu, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _nirm_hinirmcpp(SEXP dataSEXP, SEXP nschoolSEXP, SEXP nmaxSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP ncountSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP pr_mean_gammaSEXP, SEXP pr_sd_gammaSEXP, SEXP pr_mean_muSEXP, SEXP pr_sd_muSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nschool(nschoolSEXP);
    Rcpp::traits::input_parameter< const int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ncount(ncountSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_gamma(pr_mean_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_gamma(pr_sd_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_mu(pr_mean_muSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_mu(pr_sd_muSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hinirmcpp(data, nschool, nmax, nitem, ndim, ncount, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, pr_mean_theta, pr_sd_theta, pr_mean_z, pr_mean_gamma, pr_sd_gamma, pr_mean_mu, pr_sd_mu, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// hinirmnocpp
Rcpp::List hinirmnocpp(arma::cube data, const int nschool, const int nmax, const int nitem, const int ndim, arma::vec ncount, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double pr_mean_gamma, const double pr_sd_gamma, const double pr_mean_mu, const double pr_sd_mu, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _nirm_hinirmnocpp(SEXP dataSEXP, SEXP nschoolSEXP, SEXP nmaxSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP ncountSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP pr_mean_gammaSEXP, SEXP pr_sd_gammaSEXP, SEXP pr_mean_muSEXP, SEXP pr_sd_muSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nschool(nschoolSEXP);
    Rcpp::traits::input_parameter< const int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ncount(ncountSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_gamma(pr_mean_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_gamma(pr_sd_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_mu(pr_mean_muSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_mu(pr_sd_muSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hinirmnocpp(data, nschool, nmax, nitem, ndim, ncount, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, pr_mean_theta, pr_sd_theta, pr_mean_z, pr_mean_gamma, pr_sd_gamma, pr_mean_mu, pr_sd_mu, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// hrnirmcpp
Rcpp::List hrnirmcpp(arma::cube data, const int nschool, const int nmax, const int nitem, const int ndim, arma::vec ncount, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_gamma, const double pr_sd_gamma, const double pr_mean_mu, const double pr_sd_mu, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _nirm_hrnirmcpp(SEXP dataSEXP, SEXP nschoolSEXP, SEXP nmaxSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP ncountSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_gammaSEXP, SEXP pr_sd_gammaSEXP, SEXP pr_mean_muSEXP, SEXP pr_sd_muSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nschool(nschoolSEXP);
    Rcpp::traits::input_parameter< const int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ncount(ncountSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_gamma(pr_mean_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_gamma(pr_sd_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_mu(pr_mean_muSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_mu(pr_sd_muSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hrnirmcpp(data, nschool, nmax, nitem, ndim, ncount, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_theta, pr_sd_theta, pr_mean_gamma, pr_sd_gamma, pr_mean_mu, pr_sd_mu, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// hrnirmnocpp
Rcpp::List hrnirmnocpp(arma::cube data, const int nschool, const int nmax, const int nitem, const int ndim, arma::vec ncount, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_gamma, const double pr_sd_gamma, const double pr_mean_mu, const double pr_sd_mu, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _nirm_hrnirmnocpp(SEXP dataSEXP, SEXP nschoolSEXP, SEXP nmaxSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP ncountSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_gammaSEXP, SEXP pr_sd_gammaSEXP, SEXP pr_mean_muSEXP, SEXP pr_sd_muSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nschool(nschoolSEXP);
    Rcpp::traits::input_parameter< const int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ncount(ncountSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_gamma(pr_mean_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_gamma(pr_sd_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_mu(pr_mean_muSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_mu(pr_sd_muSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hrnirmnocpp(data, nschool, nmax, nitem, ndim, ncount, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_theta, pr_sd_theta, pr_mean_gamma, pr_sd_gamma, pr_mean_mu, pr_sd_mu, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// hrnirmecpp
Rcpp::List hrnirmecpp(arma::cube data, const int nschool, const int nmax, const int nitem, const int ndim, arma::vec ncount, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_w, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_gamma, const double pr_sd_gamma, const double pr_mean_mu, const double pr_sd_mu, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _nirm_hrnirmecpp(SEXP dataSEXP, SEXP nschoolSEXP, SEXP nmaxSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP ncountSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_wSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_gammaSEXP, SEXP pr_sd_gammaSEXP, SEXP pr_mean_muSEXP, SEXP pr_sd_muSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nschool(nschoolSEXP);
    Rcpp::traits::input_parameter< const int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ncount(ncountSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_gamma(pr_mean_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_gamma(pr_sd_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_mu(pr_mean_muSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_mu(pr_sd_muSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hrnirmecpp(data, nschool, nmax, nitem, ndim, ncount, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_w, pr_mean_theta, pr_sd_theta, pr_mean_gamma, pr_sd_gamma, pr_mean_mu, pr_sd_mu, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// hrnirmenocpp
Rcpp::List hrnirmenocpp(arma::cube data, const int nschool, const int nmax, const int nitem, const int ndim, arma::vec ncount, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_w, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_gamma, const double pr_sd_gamma, const double pr_mean_mu, const double pr_sd_mu, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _nirm_hrnirmenocpp(SEXP dataSEXP, SEXP nschoolSEXP, SEXP nmaxSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP ncountSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_wSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_gammaSEXP, SEXP pr_sd_gammaSEXP, SEXP pr_mean_muSEXP, SEXP pr_sd_muSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nschool(nschoolSEXP);
    Rcpp::traits::input_parameter< const int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ncount(ncountSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_gamma(pr_mean_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_gamma(pr_sd_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_mu(pr_mean_muSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_mu(pr_sd_muSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hrnirmenocpp(data, nschool, nmax, nitem, ndim, ncount, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_w, pr_mean_theta, pr_sd_theta, pr_mean_gamma, pr_sd_gamma, pr_mean_mu, pr_sd_mu, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// hrnirmfcpp
Rcpp::List hrnirmfcpp(arma::cube data, const int nschool, const int nmax, const int nitem, const int ndim, arma::vec ncount, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_gamma, const double pr_sd_gamma, const double pr_mean_mu, const double pr_sd_mu, const double prior_a, const double prior_b, const double fix_error, bool option, const int cores);
RcppExport SEXP _nirm_hrnirmfcpp(SEXP dataSEXP, SEXP nschoolSEXP, SEXP nmaxSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP ncountSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_gammaSEXP, SEXP pr_sd_gammaSEXP, SEXP pr_mean_muSEXP, SEXP pr_sd_muSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP fix_errorSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nschool(nschoolSEXP);
    Rcpp::traits::input_parameter< const int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ncount(ncountSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_gamma(pr_mean_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_gamma(pr_sd_gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_mu(pr_mean_muSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_mu(pr_sd_muSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< const double >::type fix_error(fix_errorSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hrnirmfcpp(data, nschool, nmax, nitem, ndim, ncount, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_theta, pr_sd_theta, pr_mean_gamma, pr_sd_gamma, pr_mean_mu, pr_sd_mu, prior_a, prior_b, fix_error, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// inirmecpp
Rcpp::List inirmecpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _nirm_inirmecpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(inirmecpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_z, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// inirmfcpp
Rcpp::List inirmfcpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double prior_a, const double prior_b, const double fix_error, bool option, const int cores);
RcppExport SEXP _nirm_inirmfcpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP fix_errorSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< const double >::type fix_error(fix_errorSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(inirmfcpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_z, prior_a, prior_b, fix_error, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// inirmvcpp
Rcpp::List inirmvcpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double prior_a, const double prior_b, bool option, const int cores, const int coding);
RcppExport SEXP _nirm_inirmvcpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP, SEXP codingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< const int >::type coding(codingSEXP);
    rcpp_result_gen = Rcpp::wrap(inirmvcpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_z, prior_a, prior_b, option, cores, coding));
    return rcpp_result_gen;
END_RCPP
}
// nirmmscpp
Rcpp::List nirmmscpp(arma::cube data, arma::vec nsample, arma::vec nitem, const int ndim, const int nset, const int nsamp_max, const int nitem_max, const int ntotal_max, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_z, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _nirm_nirmmscpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP nsetSEXP, SEXP nsamp_maxSEXP, SEXP nitem_maxSEXP, SEXP ntotal_maxSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_zSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type nset(nsetSEXP);
    Rcpp::traits::input_parameter< const int >::type nsamp_max(nsamp_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem_max(nitem_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type ntotal_max(ntotal_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_z(pr_mean_zSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(nirmmscpp(data, nsample, nitem, ndim, nset, nsamp_max, nitem_max, ntotal_max, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_z, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// rnirmecpp
Rcpp::List rnirmecpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_w, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _nirm_rnirmecpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_wSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_w(pr_mean_wSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(rnirmecpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_w, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// rnirmfcpp
Rcpp::List rnirmfcpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_w, const double prior_a, const double prior_b, const double fix_error, bool option, const int cores);
RcppExport SEXP _nirm_rnirmfcpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_wSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP fix_errorSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_w(pr_mean_wSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< const double >::type fix_error(fix_errorSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(rnirmfcpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_w, prior_a, prior_b, fix_error, option, cores));
    return rcpp_result_gen;
END_RCPP
}
// rnirmvcpp
Rcpp::List rnirmvcpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_beta, const double jump_theta, const double jump_z, const double jump_w, const double pr_mean_beta, const double pr_sd_beta, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_w, const double prior_a, const double prior_b, bool option, const int cores, const int coding);
RcppExport SEXP _nirm_rnirmvcpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_betaSEXP, SEXP jump_thetaSEXP, SEXP jump_zSEXP, SEXP jump_wSEXP, SEXP pr_mean_betaSEXP, SEXP pr_sd_betaSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_wSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP, SEXP codingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_beta(jump_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_z(jump_zSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_beta(pr_mean_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_beta(pr_sd_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_w(pr_mean_wSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< const int >::type coding(codingSEXP);
    rcpp_result_gen = Rcpp::wrap(rnirmvcpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_beta, jump_theta, jump_z, jump_w, pr_mean_beta, pr_sd_beta, pr_mean_theta, pr_sd_theta, pr_mean_w, prior_a, prior_b, option, cores, coding));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nirm_hinirmcpp", (DL_FUNC) &_nirm_hinirmcpp, 24},
    {"_nirm_hinirmnocpp", (DL_FUNC) &_nirm_hinirmnocpp, 24},
    {"_nirm_hrnirmcpp", (DL_FUNC) &_nirm_hrnirmcpp, 24},
    {"_nirm_hrnirmnocpp", (DL_FUNC) &_nirm_hrnirmnocpp, 24},
    {"_nirm_hrnirmecpp", (DL_FUNC) &_nirm_hrnirmecpp, 23},
    {"_nirm_hrnirmenocpp", (DL_FUNC) &_nirm_hrnirmenocpp, 23},
    {"_nirm_hrnirmfcpp", (DL_FUNC) &_nirm_hrnirmfcpp, 25},
    {"_nirm_inirmecpp", (DL_FUNC) &_nirm_inirmecpp, 20},
    {"_nirm_inirmfcpp", (DL_FUNC) &_nirm_inirmfcpp, 22},
    {"_nirm_inirmvcpp", (DL_FUNC) &_nirm_inirmvcpp, 22},
    {"_nirm_nirmmscpp", (DL_FUNC) &_nirm_nirmmscpp, 24},
    {"_nirm_rnirmecpp", (DL_FUNC) &_nirm_rnirmecpp, 20},
    {"_nirm_rnirmfcpp", (DL_FUNC) &_nirm_rnirmfcpp, 22},
    {"_nirm_rnirmvcpp", (DL_FUNC) &_nirm_rnirmvcpp, 22},
    {NULL, NULL, 0}
};

RcppExport void R_init_nirm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
